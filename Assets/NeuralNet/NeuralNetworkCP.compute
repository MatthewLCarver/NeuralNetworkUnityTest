// use the mathnet library
#include "Assets/Plugins/MathNet.Numerics.dll"
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain




// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct denseMatrix
{
    int rows;
    int cols;
    float* data;

    denseMatrix(int _rows, int _cols, float _data[])
    {
        rows = _rows;
        cols = _cols;
        data = _data;
    }
};

RWBuffer<matrix> ResultBuffer;
RWStructuredBuffer<denseMatrix> inputs;
RWStructuredBuffer<denseMatrix> weights;
RWStructuredBuffer<denseMatrix> biases;
RWStructuredBuffer<denseMatrix> hiddenNeuronsPerLayer;
RWStructuredBuffer<denseMatrix> activations;
RWStructuredBuffer<denseMatrix> outputs;


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // neural network forward pass
    // for each layer
    // multiply the inputs by the weights
    // add the biases
    // apply the activation function
    // store the result in the outputs buffer

    
    
    
}
